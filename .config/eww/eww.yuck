(defpoll hour :interval "1s" "date +%H")
(defpoll min  :interval "1s" "date +%M")
(defpoll sec  :interval "1s" "date +%S")
(defpoll default_dt :interval "1s" "date")
(defpoll day_word :interval "10m" "date +%a | tr [:upper:] [:lower:]")
(defpoll day      :interval "10m" "date +%d")
(defpoll month    :interval "1h"  "date +%m")
(defpoll year     :interval "1h"  "date +%y")
(defpoll date_poll :interval "1m" "date +%m/%d/%Y")
(defpoll time_poll :interval "1s" "date +%H:%M:%S")
(defpoll vol :interval "1s" `pulsemixer --get-volume | cut -d ' ' -f 1`)
(defpoll bright :interval "1s" `blight get`)
;; (deflisten vol :initial "0" `tail -F ~/tmp/current-volume`)

(defwidget workspaces []
  (box :class "workspaces"
       :orientation "h"
       :space-evenly true
       :halign "center"
       :spacing 2
    (button :onclick "wmctrl -s 0" 1)
    (button :onclick "wmctrl -s 1" 2)
    (button :onclick "wmctrl -s 2" 3)
    (button :onclick "wmctrl -s 3" 4)
    (button :onclick "wmctrl -s 4" 5)
    (button :onclick "wmctrl -s 5" 6)
    (button :onclick "wmctrl -s 6" 7)))

(defwidget icon-module [icon ?class ?visible]
  (box :class "${class} icon-module"
       :orientation "h"
       :space-evenly true
       :visible {visible ?: true} ; because the argument is optional
    (label :halign "start" :class "icon-module__icon" :text "${icon}")
    (children)))

(defwidget date [ha]
    (label :halign ha :text date_poll))

(defwidget time [ha]
    (label :halign ha :text time_poll))

(defwidget disk []
  (icon-module :class "stat" :icon "ÔÇ†" 
    (label :halign "end" :text "${round(EWW_DISK["/"].used_perc, 0)}%")))

(defwidget ram []
  (icon-module :class "stat" :icon "üíæ"
    (label :halign "end" :text "${round(EWW_RAM.used_mem / 1073741824, 2)} GiB")))

(defwidget cpu []
  (icon-module :class "stat" :icon "Ôãõ"
    (label :halign "end" :class "stat" :text "${round(EWW_CPU.avg, 0)}%")))

(defwidget battery []
  (icon-module :class "stat" :icon "Û∞Åπ"
    (label :halign "end" :text "${round(EWW_BATTERY.total_avg, 0)}%")))

(defwidget temperature []
  (icon-module :class "stat" :icon "Óàä"
    (label :halign "end" :text "${EWW_TEMPS.CORETEMP_PACKAGE_ID_0}¬∞")))

(defwidget wifi []
  (box :orientation "v"
        (icon-module
          :class "stat"
          :icon "‚¨à"
          (label
            :halign "start"
            :text "${round(EWW_NET.wlp166s0.NET_UP / 1048576, 2)} MB/s"))
        (icon-module
          :class "stat"
          :icon "‚¨ä"
          (label
            :halign "end"
            :hexpand true
            :text "${round(EWW_NET.wlp166s0.NET_DOWN / 1048576, 2)} MB/s"))))

(defwidget volume []
  (icon-module :class "stat" :icon "üï™"
    (label :halign "end" :text "${vol}%")))

(defwidget brightness []
  (icon-module :class "stat" :icon "‚òÄ"
    (label
      :halign "end"
      :text "${round(bright / 96000, 2) * 100}%")))

(defwidget bar []
  (box
    :orientation "v"
    :space-evenly false
    :class "bar"
      (battery)
      (disk)
      (cpu)
      (ram)
      (temperature)
      (wifi)
      (volume)
      (brightness)))

(deflisten bspwm_desktop_1 :initial "-" `tail -F ~/.bspeww/desktops/I`)
(deflisten bspwm_desktop_2 :initial "-" `tail -F ~/.bspeww/desktops/II`)
(deflisten bspwm_desktop_3 :initial "-" `tail -F ~/.bspeww/desktops/III`)
(deflisten bspwm_desktop_4 :initial "-" `tail -F ~/.bspeww/desktops/IV`)
(deflisten bspwm_desktop_5 :initial "-" `tail -F ~/.bspeww/desktops/V`)
(deflisten bspwm_desktop_6 :initial "-" `tail -F ~/.bspeww/desktops/VI`)
(deflisten bspwm_desktop_7 :initial "-" `tail -F ~/.bspeww/desktops/VII`)

(defwidget bspwm-widget []
  (box
    :class "bspwm-widget"
    (box :orientation "v"
      (bspwm-win-state :name "I" :windows bspwm_desktop_1)
      (bspwm-win-state :name "II" :windows bspwm_desktop_2)
      (bspwm-win-state :name "III" :windows bspwm_desktop_3)
      (bspwm-win-state :name "IV" :windows bspwm_desktop_4)
      (bspwm-win-state :name "V" :windows bspwm_desktop_5)
      (bspwm-win-state :name "VI" :windows bspwm_desktop_6)
      (bspwm-win-state :name "VII" :windows bspwm_desktop_7))))

(defwidget bspwm-win-state [name windows]
  (box :space-evenly false
       :hexpand false
    (label :halign "start"
           :text name)
    (label :halign "end"
           :hexpand true
           :class "bspwm-win-state-windows"
           :text "${windows}")))

(defwindow bspwm-info
  :monitor 0
  :geometry (geometry :anchor "top left")
  :wm-ignore true
  :windowtype "normal"
  :stacking "fg"
  (bspwm-widget))

(defwindow right-dock
  :monitor 0
  :geometry (geometry :anchor "top right")
  :wm-ignore true
  :windowtype "dock"
  :stacking "fg"
  (bar))

(defwindow main
  :monitor 0
  :geometry (geometry :anchor "top center")
  :wm-ignore true
  ; why does :windowtype "normal" make the horizontal
  ; alignment slightly off to the right?
  :windowtype "dock"
  :stacking "fg"
  (box :orientation "h" :space-evenly false
    (box :orientation "v" :space-evenly false
      (box :vexpand true (label))
      (box :orientation "v"
        (label :text "hello")
        (date :ha "center")
        (time :ha "center"))
      (box :vexpand true (label)))
    (box (bspwm-widget))
    (box (bar :screen 0))))

