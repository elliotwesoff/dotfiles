(defwidget workspaces []
  (box :class "workspaces"
       :orientation "h"
       :space-evenly true
       :halign "center"
       :spacing 2
    (button :onclick "wmctrl -s 0" 1)
    (button :onclick "wmctrl -s 1" 2)
    (button :onclick "wmctrl -s 2" 3)
    (button :onclick "wmctrl -s 3" 4)
    (button :onclick "wmctrl -s 4" 5)
    (button :onclick "wmctrl -s 5" 6)
    (button :onclick "wmctrl -s 6" 7)))

(defwidget icon-module [icon ?class ?visible]
  (box :class "${class} icon-module"
       :orientation "h"
       :space-evenly true
       :visible {visible ?: true} ; because the argument is optional
    (label :halign "start" :class "icon-module__icon" :text "${icon}")
    (children)))

(defwidget date [ha]
  (label :halign ha :text date_poll))

(defwidget time [ha]
  (label :halign ha :text time_poll))

(defwidget cet_time [ha]
  (label :halign ha :text cet_time_poll))

(defwidget disk []
    (label :text "${round(EWW_DISK["/"].used / gib, 0)} GiB"))

(defwidget ram []
  (label :text "${round(EWW_RAM.used_mem / gib, 2)} GiB"))

(defwidget cpu []
  (label :class "stat" :text "${round(EWW_CPU.avg, 0)}%"))

(defwidget cputemp []
  (label :class "stat" :text "${EWW_TEMPS.CORETEMP_PACKAGE_ID_0}Â°"))

(defwidget battery []
    (label :text "${EWW_BATTERY.BAT1.status == 'Charging' || EWW_BATTERY.total_avg >= 100 ?  'âš¡' : ''} ${round(EWW_BATTERY.total_avg, 0)}%"))

(defwidget temperature []
  (icon-module :class "stat" :icon "ðŸ¤’"
    (label :halign "end" :text "${EWW_TEMPS.CORETEMP_PACKAGE_ID_0}Â°")))

(defwidget wifiup [] 
  (label :text "${EWW_NET.wlp166s0.NET_UP}"))

(defwidget wifidown [] 
  (label :text "${EWW_NET.wlp166s0.NET_DOWN}"))

(defwidget volume []
  (label
    :class "volume ${vollisten.mute ? 'muted' : ''}"
    :text "${vollisten["volume"]}"))

(defwidget brightness []
  (box
    :orientation "v"
    (label :text "brightness")
    (label :text "${round((bright / 96000) * 100, 0)}%")))

(defwidget vbar []
  (box
    :orientation "v"
    :space-evenly true
    :width "250"
    :class "vbar"
      (battery)
      (disk)
      (cpu)
      (ram)
      (wifi)
      (volume)
      (brightness)))

(defwidget bspwm-widget []
  (box
    :class "bspwm-widget"
    (box
      (bspwm-win-state :name "I" :windows "${bspwm_data[0] ?: []}"))
    (box
      (bspwm-win-state :name "II" :windows "${bspwm_data[1] ?: []}"))
    (box
      (bspwm-win-state :name "III" :windows "${bspwm_data[2] ?: []}"))
    (box
      (bspwm-win-state :name "IV" :windows "${bspwm_data[3] ?: []}"))
    (box
      (bspwm-win-state :name "V" :windows "${bspwm_data[4] ?: []}"))
    (box
      (bspwm-win-state :name "VI" :windows "${bspwm_data[5] ?: []}"))
    (box
      (bspwm-win-state :name "VII" :windows "${bspwm_data[6] ?: []}"))))

(defwidget bspwm-win-state [name windows]
  (box
    :space-evenly false
    :hexpand false
    :orientation "v"
    :class "bspwm-win-state ${name == bspwm_selected ? 'selected' : ''}"
    (label :halign "center"
           :class "desktop-name"
           :text name)
    (box
      :space-evenly false
      :orientation "v"
      :vexpand true
      :class "${name == bspwm_selected ? 'selected' : ''}"
      (for win in windows
        (label :halign "center" :valign "center"
               :hexpand true
               :class "bspwm-win-state-windows ${name == bspwm_selected ? 'selected' : ''}"
               :text win)))))

(defwidget spacer []
  (box))

(defwidget greeter []
  (box
    :orientation "v"
    (box :orientation "v"
      (label :text "good ${hour < 5 ? 'night'
                        : (hour < 12 ? 'morning'
                        : (hour < 18 ? 'afternoon'
                        : (hour < 21 ? 'evening' : 'night')))}")
      (spacer)
      (time :ha "center")
      (cet_time :ha "center")
      (spacer)
      (date :ha "center"))))

(defwidget lock []
  (box
    :class "btn-container p3"
    (button :onclick "xset s activate"
      (image :path "./images/lock.svg" :image-width 15))))

(defwidget close []
  (box
    :class "btn-container p3"
    (button :onclick "eww-toggle"
      (image :path "./images/x.svg" :image-width 12))))

(defwidget sleep []
  (box
    :class "btn-container p3"
    (button :onclick "systemctl suspend &"
      (image :path "./images/moon.svg" :image-width 15))))

(defwidget flugmodus []
  (box
    :class "btn-container p3"
    (button :onclick "eww update wifi_on=false; eww update wifi_off=true; elliot wifioff" :visible wifi_on (image :path "./images/wifi.svg" :image-width 20))
    (button :onclick "eww update wifi_on=true; eww update wifi_off=false; elliot wifion"  :visible wifi_off (image :path "./images/jet-fighter.svg" :image-width 20))))

(defwidget theme []
  (box
    :class "btn-container p3"
    (button :onclick "eww update theme_light=false; eww update theme_dark=true; theme dark" :visible theme_light (image :path "./images/sun-solid.svg" :image-width 20))
    (button :onclick "eww update theme_light=true; eww update theme_dark=false; theme light"  :visible theme_dark (image :path "./images/sun-regular.svg" :image-width 20))))

(defwidget seo [iw]
  (box
    (eventbox
      :onclick "cvlc --play-and-exit ~/dotfiles/.config/eww/sounds/quack.mp3 &"
      (image :class "image" :path './images/seo.jpg' :image-width iw))))

(defwidget wifistack []
  (box
    :orientation "v"
      (label :text "wlp166s0")
      (wifiup)
      (wifidown)))

(defwidget lostack []
  (box
    :orientation "v"
      (label :text "lo")
      (label :text "${EWW_NET.lo.NET_UP}")
      (label :text "${EWW_NET.lo.NET_DOWN}")))

(defwidget vpnstack []
  (box
    :orientation "v"
      (label :text "nordlynx")
      (label :text vpn_ip)
      (label :text vpn_city)))

(defwidget statsstack []
  (box
    :orientation "v"
    (box
      :orientation "v"
      (cpubar_full))
    (box
      :orientation "v"
      (ram)
      (disk)
      (cputemp))))

(defwidget brightval []
  (label :text "${round((bright / 96000) * 100, 0)}%"))

(defwidget peripheralsstack []
  (box
    :orientation "v"
    (box
      (image :path "./images/sun.svg")
      (spacer)
      (brightval)
      (spacer)
      (button :onclick "blight set -5%"
        (image :path "./images/minus.svg"))
      (button :onclick "blight set +5%" 
        (image :path "./images/plus.svg")))
    (box
      (button :onclick "elliot mute"
        (image :path "./images/volume-${vollisten.mute ? 'xmark' : 'high'}.svg"))
      (spacer)
      (volume)
      (spacer)
      (button :onclick "elliot voldown && cvlc --play-and-exit ./sounds/uwu.mp3 &"
        (image :path "./images/minus.svg"))
      (button :onclick "elliot volup && cvlc --play-and-exit ./sounds/uwu.mp3 &" 
        (image :path "./images/plus.svg")))))

(defwidget applauncher []
  (box
    :class "applauncher"
    (button :onclick "kitty & disown"
      (image :path "./images/terminal.svg" :image-width 25))
    (button :onclick "firefox & disown"
      (image :path "./images/firefox.svg" :image-width 25))
    (button :onclick "discord & disown"
      (image :path "./images/discord.svg" :image-width 30))
    (button :onclick "whatsdesk & disown"
      (image :path "./images/whatsapp.svg" :image-width 25))
    (button :onclick "spotify & disown"
      (image :path "./images/spotify.svg" :image-width 25))))

(defwidget battery-circle []
  (box
    (box
      :orientation "v"
      (spacer)
      (image :path "./images/battery.svg" :image-width 30)
      (label :text "${round(EWW_BATTERY.total_avg, 2)}%")
      (spacer))
    (circular-progress
      :class "battery-circle"
      :value "${round(EWW_BATTERY.total_avg > 100.0 ? 100.0 : EWW_BATTERY.total_avg, 2)}"
      :start-at 75.0
      :thickness 12.0
      :clockwise true)))

(defwidget cpubar []
  (progress
    :value "${round(EWW_CPU.avg, 0)}"
    :orientation "h"))

(defwidget cpubar_full [] 
  (box
    (for core in "${EWW_CPU.cores}"
      (progress
        :value "${core.usage}"
        :flipped true
        :orientation "v"))))
