(defwidget workspaces []
  (box :class "workspaces"
       :orientation "h"
       :space-evenly true
       :halign "center"
       :spacing 2
    (button :onclick "wmctrl -s 0" 1)
    (button :onclick "wmctrl -s 1" 2)
    (button :onclick "wmctrl -s 2" 3)
    (button :onclick "wmctrl -s 3" 4)
    (button :onclick "wmctrl -s 4" 5)
    (button :onclick "wmctrl -s 5" 6)
    (button :onclick "wmctrl -s 6" 7)))

(defwidget icon-module [icon ?class ?visible]
  (box :class "${class} icon-module"
       :orientation "h"
       :space-evenly true
       :visible {visible ?: true} ; because the argument is optional
    (label :halign "start" :class "icon-module__icon" :text "${icon}")
    (children)))

(defwidget date [ha]
  (label :halign ha :text date_poll))

(defwidget time [ha]
  (label :halign ha :text time_poll))

(defwidget timezone [ha]
  (label :halign ha :text timezone))

;; (defwidget disk []
;;   (icon-module :class "stat" :icon "💿" 
;;     (label :halign "end" :text "${round(EWW_DISK["/"].used_perc, 0)}%")))

(defwidget disk []
    (label :text "${round(EWW_DISK["/"].used / gib, 0)} GiB"))

;; (defwidget ram []
;;   (icon-module :class "stat" :icon "📝"
;;     (label :halign "end" :text "${round(EWW_RAM.used_mem / 1073741824, 2)} GiB")))

(defwidget ram []
  (label :text "${round(EWW_RAM.used_mem / gib, 2)} GiB"))

;; (defwidget cpu []
;;   (icon-module :class "stat" :icon "🧠"
;;     (label :halign "end" :class "stat" :text "${round(EWW_CPU.avg, 0)}%, ${EWW_TEMPS.CORETEMP_PACKAGE_ID_0}°")))

(defwidget cpu []
  (label :class "stat" :text "${round(EWW_CPU.avg, 0)}%"))

(defwidget cputemp []
  (label :class "stat" :text "${EWW_TEMPS.CORETEMP_PACKAGE_ID_0}°"))

;; (defwidget battery []
;;   (icon-module :class "stat" :icon "🔋"
;;     (label :halign "center" :text "${EWW_BATTERY.BAT1.status == 'Charging' || EWW_BATTERY.total_avg >= 100 ?  '⚡' : ''}")
;;     (label :halign "end" :text "${round(EWW_BATTERY.total_avg, 0)}%")))

(defwidget battery []
    (label :text "${EWW_BATTERY.BAT1.status == 'Charging' || EWW_BATTERY.total_avg >= 100 ?  '⚡' : ''} ${round(EWW_BATTERY.total_avg, 0)}%"))

(defwidget temperature []
  (icon-module :class "stat" :icon "🤒"
    (label :halign "end" :text "${EWW_TEMPS.CORETEMP_PACKAGE_ID_0}°")))

(defwidget wifi []
  (icon-module
    :class "stat"
    :icon "📡"
    (label
      :halign "end"
      :text "${EWW_NET.wlp166s0.NET_UP}")
    (label
      :halign "end"
      :text "${EWW_NET.wlp166s0.NET_DOWN}")))

(defwidget wifiup [] 
  (label :text "${EWW_NET.wlp166s0.NET_UP}"))

(defwidget wifidown [] 
  (label :text "${EWW_NET.wlp166s0.NET_DOWN}"))

;; (defwidget volume []
;;   (icon-module :class "stat" :icon "🙉"
;;     (label
;;       :halign "end"
;;       :class "volume ${vollisten["mute"] ? 'muted' : ''}"
;;       :text "${vollisten["volume"]}")))

(defwidget volume []
  (label
    :class "volume ${vollisten["mute"] ? 'muted' : ''}"
    :text "${vollisten["volume"]}"))


;; TODO: how to convert bright result to float (f64)?
;; (defwidget brightness []
;;   (icon-module :class "stat" :icon "😎"
;;     (label :text "${round((bright / 96000) * 100, 0)}%")))

(defwidget brightness []
  (box
    :orientation "v"
    (label :text "brightness")
    (label :text "${round((bright / 96000) * 100, 0)}%")))

(defwidget vbar []
  (box
    :orientation "v"
    :space-evenly true
    :width "250"
    :class "vbar"
      (battery)
      (disk)
      (cpu)
      (ram)
      (wifi)
      (volume)
      (brightness)))

(defwidget bspwm-widget []
  (box
    :class "bspwm-widget"
    (box :orientation "v"
      (bspwm-win-state :name "I" :windows "${bspwm_data[0] ?: ''}")
      (bspwm-win-state :name "II" :windows "${bspwm_data[1] ?: ''}")
      (bspwm-win-state :name "III" :windows "${bspwm_data[2] ?: ''}")
      (bspwm-win-state :name "IV" :windows "${bspwm_data[3] ?: ''}")
      (bspwm-win-state :name "V" :windows "${bspwm_data[4] ?: ''}")
      (bspwm-win-state :name "VI" :windows "${bspwm_data[5] ?: ''}")
      (bspwm-win-state :name "VII" :windows "${bspwm_data[6] ?: ''}"))))

(defwidget bspwm-win-state [name windows]
  (box :space-evenly false
       :hexpand false
       :class "bspwm-win-state"
    (label :halign "start"
           :class "desktop-name ${name == bspwm_selected ? 'selected' : ''}"
           :text name)
    (label :halign "end"
           :hexpand true
           :class "bspwm-win-state-windows"
           :text "${windows}")))

(defwidget spacer []
  (box))

(defwidget greeter []
  (box
    :orientation "v"
    ;; :space-evenly false
    (box :orientation "v"
      (label :text "good ${hour < 5 ? 'night' : (hour < 12 ? 'morning' : (hour < 18 ? 'afternoon' : (hour < 21 ? 'evening' : 'night')))}")
      (spacer)
      (date :ha "center")
      (time :ha "center")
      (spacer)
      (timezone :ha "center"))))

(defwidget lock []
  (box
    :class "btn-container p3"
    (button :onclick "xset s activate" "")))

(defwidget logout []
  (box
    :class "btn-container p3"
    (button :onclick "elliot logout" "")))

(defwidget close []
  (box
    :class "btn-container p3"
    (button :onclick "eww-toggle" "")))

(defwidget flugmodus []
  (box
    :class "btn-container p3"
    (button :onclick "elliot wifitoggle" "")))

(defwidget seo [iw]
  (image :class "image" :path './images/seo.jpg' :image-width iw))

(defwidget wifistack []
  (box
    :orientation "v"
      (label :text "wlp166s0")
      (label :text "${EWW_NET.wlp166s0.NET_UP}")
      (label :text "${EWW_NET.wlp166s0.NET_DOWN}")))

(defwidget lostack []
  (box
    :orientation "v"
      (label :text "lo")
      (label :text "${EWW_NET.lo.NET_UP}")
      (label :text "${EWW_NET.lo.NET_DOWN}")))

(defwidget statsstack []
  (box
    :orientation "v"
    (spacer)
    (cpubar)
    (ram)
    (disk)
    (cputemp)
    (spacer)))

(defwidget brightval []
  (label :text "${round((bright / 96000) * 100, 0)}%"))

(defwidget peripheralsstack []
  (box
    :orientation "v"
    (box
      (label :text "")
      (brightval)
      (spacer)
      (spacer)
      (button :onclick "blight set -5%"
        (image :path "./images/minus-solid.svg" :image-width 17))
      (button :onclick "blight set +5%" 
        (image :path "./images/plus-solid.svg" :image-width 17)))
    (box
      (label :text "")
      (volume)
      (spacer)
      (button :class "m1" :onclick "elliot mute" "")
      (button :onclick "elliot voldown"
       (image :path "./images/minus-solid.svg" :image-width 17))
      (button :onclick "elliot volup" 
        (image :path "./images/plus-solid.svg" :image-width 17)))))

(defwidget applauncher []
  (box
    :class "applauncher"
    (button :onclick "kitty & disown" "") ;; TODO: get svgs for all of these icons
    (button :onclick "firefox & disown" "")
    (button :onclick "discord & disown" "")
    (button
      :onclick
      "whatsdesk & disown"
      (image :path "./images/whatsapp.svg" :image-width 30))
    (button
      :onclick
      "spotify & disown"
      (image :path "./images/spotify.svg" :image-width 30))))

(defwidget battery-circle []
  (box
    (box
      :orientation "v"
      (spacer)
      (image :path "./images/carbat.svg" :image-width 30)
      (label :text "${round(EWW_BATTERY.total_avg, 2)}%")
      (spacer))
    (circular-progress
    :value "${EWW_BATTERY.total_avg}"
    :start-at 75.0
    :thickness 12.0
    :clockwise true)))

(defwidget cpubar []
  (progress
    :value "${round(EWW_CPU.avg, 0)}"
    :orientation "h"))
